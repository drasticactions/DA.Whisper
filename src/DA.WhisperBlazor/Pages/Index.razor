@inject IJSRuntime JsRuntime
@using DA.Whisper;
@using Microsoft.AspNetCore.Components.Forms

@page "/"

<h1>DA.WhisperWasm Debug</h1>

<div>
    <button class="btn btn-primary" @onclick="OnButtonClick">Show Whipser System Info</button>
</div>

<div>
    <p>Select Model: </p>
    <InputFile OnChange="OnHandleModelSelection" />
</div>

<div>
    <p>Select Audio: </p>
    <InputFile OnChange="OnHandleAudioSelection" />
</div>

<div>
    <button class="btn btn-primary" @onclick="OnWhisperClick" disabled="@(!canExecute)">Create Transcript</button>
</div>

@code
{
    private IBrowserFile? _selectedModel;
    private IBrowserFile? _selectedAudio;

    private bool isRunning = false;
    private bool canExecute => !isRunning && (_selectedModel is not null && _selectedAudio is not null);

    private async void OnButtonClick(MouseEventArgs e)
    {
        var test = NativeMethods.whisper_full_default_params(whisper_sampling_strategy.WHISPER_SAMPLING_GREEDY);
       await JsRuntime.InvokeVoidAsync("alert", $"{DA.Whisper.Whisper.GetSystemInfo()}");
    }

    private async void OnWhisperClick(MouseEventArgs e)
    {
        isRunning = true;
        try
        {
            using var modelMemoryStream = new MemoryStream();
            var modelFile = _selectedModel!.OpenReadStream(Int32.MaxValue);
            await modelFile.CopyToAsync(modelMemoryStream);
            var model = WhisperModel.TryFromBuffer(modelMemoryStream.ToArray());
            if (model is null)
            {
                await JsRuntime.InvokeVoidAsync("alert", $"Failed to create model");
                return;
            }
            
            var audioFile = _selectedAudio!.OpenReadStream(Int32.MaxValue);
            using var memoryStream = new MemoryStream();
            await audioFile.CopyToAsync(memoryStream);

            var processor = WhisperProcessor.CreateWithDefaultGreedyStrategy(model);
            var result = processor.ProcessAsync(memoryStream);
            await foreach (var item in result)
            {
                Console.WriteLine(item.ToString());
            }
        }
        catch
        {
            throw;
        }
        finally
        {
            isRunning = false;
        }
    }

    private void OnHandleModelSelection(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().FirstOrDefault();
        if (file != null)
        {
            _selectedModel = file;
        }
    }

    private void OnHandleAudioSelection(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().FirstOrDefault();
        if (file != null)
        {
            _selectedAudio = file;
        }
    }
}
